!!python/dict
  node:
    obj_type: VAL= 'group' if (nodegroup.groupname == node); 'node'
    obj_info: 
      groups: VAL= nodelist.groups if ([obj_type] == 'node')
      grouptype: VAL= nodegroup.grouptype if ([obj_type] == 'group')
      members: VAL= nodegroup.members if ([obj_type] == 'group')
      filter: VAL= nodegroup.wherevals if ([obj_type] == 'group')
    device_type: VAL= 'switch' if (switches.switch == node); 'pdu' if (switches.pdu == node); 'server'  
    device_info:
      arch: nodetype.arch
      supportedarchs: nodetype.supportedarchs
      disksize: hwinv.disksize
      memory: hwinv.memory
      cputype: hwinv.cputype
      cpucount: hwinv.cpucount
      mtm: vpd.mtm
      uuid: vpd.uuid
      switchtype: VAL= switches.switchtype if ([device_type] == 'switch')
      pdutype:  VAL= pdu.machinetype if ([device_type] == 'pdu')
      outlets: VAL= pdu.outlet if ([device_type] == 'pdu')
      model: VAL= pdu.modelnum if ([device_type] == 'pdu')
      serial: VAL= pdu.serialnum if ([device_type] == 'pdu'); vpd.serial if(device_type == 'node')       
    security_info:
      snmpusername: VAL= switches.username if ([device_type] == 'switch')
      snmppassword: VAL= switches.password if ([device_type] == 'switch')
      snmpversion: VAL= switches.snmpversion if ([device_type] == 'switch')
      snmpprivacy: VAL= switches.privacy if ([device_type] == 'switch')
      snmpauth: VAL= switches.auth if ([device_type] == 'switch')
      sshusername: VAL= switches.sshusername if ([device_type] == 'switch')
      sshpassword: VAL= switches.sshpassword if ([device_type] == 'switch')
      remoteprotocol: VAL= switches.protocol if ([device_type] == 'switch')
      zonename: nodelist.zonename
      productkey: prodkey.key
    network_info:
      otherinterfaces: hosts.otherinterfaces
      routenames: noderes.routenames
      primarynic: 
        ip: hosts.ip
        mac: mac.mac    
        hostnames: hosts.hostnames
        switch: switch.switch
        switchport: switch.port
        switchvlan: switch.vlan
      nics:
        nic1: 
            ips: nics.nicips
            hostnamesuffixes: nics.nichostnamesuffixes
            hostnameprefixe: nics.nichostnamesuffixes
            alias: nics.nicaliases
            type: nics.nictypes
            configscripts: nics.niccustomscripts
            networks: nics.nicnetworks
            extraconfig: nics.nicextraparams
            nicdevices: nis.nicdevices
    engines:
       hardware_mgt_engine:
          engine_type: nodehm.mgt
          engine_info:
            bmc: VAL= openbmc.bmc if([engines][hardware_mgt_engine][engine_type] == 'openbmc'); ipmi.bmc if([engines][hardware_mgt_engine][engine_type] == 'ipmi'); kvm if([engines][hardware_mgt_engine][engine_type] == 'kvm')
            bmcusername: VAL= openbmc.username if([engines][hardware_mgt_engine][engine_type] == 'openbmc'); ipmi.username if ([engines][hardware_mgt_engine][engine_type] == 'ipmi')
            bmcpassword: VAL= openbmc.bmcpassword if([engines][hardware_mgt_engine][engine_type] == 'openbmc'); ipmi.password if ([engines][hardware_mgt_engine][engine_type] == 'ipmi')
            bmcvlantag: VAL= openbmc.taggedvlan if([engines][hardware_mgt_engine][engine_type] == 'openbmc'); ipmi.taggedvlan if ([engines][hardware_mgt_engine][engine_type] == 'ipmi')
            consport: openbmc.consport
            bmcport: ipmi.bmcport
            vmhost: vm.host
            vmstorage: vm.storage
            vmothersetting: vm.othersettings
            vmstoragemodel: vm.storagemodel
            vmmemory: vm.memory
            vmcpus: vm.vmcpus
            vmnics: vm.vmnics
            vmnicnicmodel: vm.vmnicnicmodel
            vmvirtflags: vm.virtflags
            vmvncport: vm.vmvncport
       power_mgt_engine:
          engine_type: nodehm.mgt 
          engine_info: 
            pdu: pduoutlet.pdu
       netboot_engine:
          engine_type: noderes.netboot 
          engine_info: 
            installnic: noderes.installnic
            discoverynics: noderes.discoverynics
            osimage: nodetype.provmethod
            chain: chain.chain
            addkcmdline: bootparams.addkcmdline
            postscripts: postscripts.postscripts
            postbootscripts: postscripts.postbootscripts
       console_engine:
          engine_type: nodehm.mgt
          engine_info:
            cons: nodehm.cons
            conserver: nodehm.conserver
            serialport: nodehm.serialport
            serialspeed: nodehm.serialspeed
            serialflow: nodehm.serialflow
            consoleondemand: nodehm.consoleondemand
    role: VAL= 'service' if(servicenode.node==node); 'compute'
    role_info:
      xcatmaster: noderes.xcatmaster
      servicenode: noderes.servicenode
      tftpserver: noderes.tftpserver
      nfsserver: noderes.nfsserver
      monserver: noderes.monserver
      nameservers: noderes.nameservers
      enablesyslog: noderes.syslog
      setupnameserver: VAL= servicenode.nameserver if([role] == 'service')
      setupdhcp: VAL= servicenode.dhcpserver if([role] == 'service')
      setuptftp: VAL= servicenode.tftpserver if([role] == 'service')
      setupnfs: VAL= servicenode.nfsserver if([role] == 'service')
      setupconserver: VAL= servicenode.conserver if([role] == 'service')
      setupipforward: VAL= servicenode.ipforward if([role] == 'service')
      setupproxydhcp: VAL= servicenode.proxydhcp if([role] == 'service')
      setupldap: VAL= servicenode.ldapserver if([role] == 'service')
      setupntp: VAL= servicenode.ntpserver if([role] == 'service')
      dhcpinterfaces: VAL= servicenode.dhcpinterfaces if([role] == 'service')
        
