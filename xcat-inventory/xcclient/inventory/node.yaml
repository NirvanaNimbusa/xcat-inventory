!!python/dict
  node:
    obj_type: 
    - "${{ groupname=T{nodegroup.groupname}, nodename=T{nodelist.node},objname=V{obj_name} :'node' if nodename == objname else 'group'}}"
    - "W:T{nodegroup.groupname}=${{objtype=V{obj_type}: V{obj_name} if objtype=='group' else None}}"
    - "W:T{nodelist.node}=${{objtype=V{obj_type}: V{obj_name} if objtype=='node' else None}}"
    obj_info: 
      groups: "${{ objtype=V{obj_type} : T{nodelist.groups} if objtype == 'node' else None}}"
      grouptype: "${{objtype=V{obj_type} :  T{nodegroup.grouptype} if objtype == 'group' else None}}"
      members: "${{objtype=V{obj_type} : T{nodegroup.members} if objtype == 'group' else None}}"
      filter: "${{ objtype=V{obj_type} : T{nodegroup.wherevals} if objtype == 'group' else None}}"
    device_type: 
    - "${{ switchname=T{switches.switch}, pduname=T{pdu.node}, objname=V{obj_name}: 'switch' if switchname == objname else 'pdu' if pduname == objname else 'server' }}"
    - "W:T{switches.switch}=${{devtype=V{device_type}: V{obj_name} if devtype == 'switch' else None}}"
    - "W:T{pdu.node}=${{devtype=V{device_type}: V{obj_name} if devtype == 'pdu' else None}}" 
    device_info:
      arch: "T{nodetype.arch}"
      supportedarchs: "T{nodetype.supportedarchs}"
      disksize: "T{hwinv.disksize}"
      memory: "T{hwinv.memory}"
      cputype: "T{hwinv.cputype}"
      cpucount: "T{hwinv.cpucount}"
      mtm: "T{vpd.mtm}"
      uuid: "T{vpd.uuid}"
      switchtype: "${{devtype=V{device_type}: T{switches.switchtype} if devtype == 'switch' else None}}"
      pdutype:  "${{devtype=V{device_type}: T{pdu.machinetype} if devtype == 'pdu' else None}}"
      outlets: "${{devtype=V{device_type}: T{pdu.outlet} if devtype == 'pdu' else None}}"
      model: "${{devtype=V{device_type}: T{pdu.modelnum} if devtype == 'pdu' else None}}"
      serial: "${{ devtype=V{device_type}: T{pdu.serialnum} if devtype == 'pdu' else T{vpd.serial} if devtype == 'node' else None}}"
    security_info:
      snmpusername: "${{devtype=V{device_type}: T{switches.username} if devtype == 'switch' else None}}"
      snmppassword: "${{devtype=V{device_type}: T{switches.password} if devtype == 'switch' else None}}"
      snmpversion: "${{devtype=V{device_type}: T{switches.snmpversion} if devtype == 'switch' else None}}"
      snmpprivacy: "${{devtype=V{device_type}: T{switches.privacy} if devtype == 'switch' else None }}"
      snmpauth: "T{switches.auth}" 
      sshusername: "T{switches.sshusername}" 
      sshpassword: "T{switches.sshpassword}"
      remoteprotocol: "T{switches.protocol}"
      zonename: "T{nodelist.zonename}"
      productkey: "T{prodkey.key}"
    network_info:
      otherinterfaces: "T{hosts.otherinterfaces}"
      routenames: "T{noderes.routenames}"
      primarynic: 
        ip: "T{hosts.ip}"
        mac: "T{mac.mac}"    
        hostnames: "T{hosts.hostnames}"
        switch: "T{switch.switch}"
        switchport: "T{switch.port}"
        switchvlan: "T{switch.vlan}"
      nics:
        ips: "T{nics.nicips}"
        hostnamesuffixes: "T{nics.nichostnamesuffixes}"
        hostnameprefixe: "T{nics.nichostnamesuffixes}"
        alias: "T{nics.nicaliases}"
        type: "T{nics.nictypes}"
        configscripts: "T{nics.niccustomscripts}"
        networks: "T{nics.nicnetworks}"
        extraconfig: "T{nics.nicextraparams}"
        nicdevices: "T{nis.nicdevices}"
    engines:
       hardware_mgt_engine:
          engine_type: "T{nodehm.mgt}"
          engine_info:
            bmc: "${{hwmgtengtype=V{engines.hardware_mgt_engine.engine_type}: T{openbmc.bmc} if hwmgtengtype == 'openbmc' else T{ipmi.bmc} if hwmgtengtype == 'ipmi' else None}}"
            bmcusername: "${{hwmgtengtype=V{engines.hardware_mgt_engine.engine_type}: T{openbmc.username} if hwmgtengtype == 'openbmc' else T{ipmi.username} if hwmgtengtype == 'ipmi' else None}}"
            bmcpassword: "${{hwmgtengtype=V{engines.hardware_mgt_engine.engine_type}: T{openbmc.bmcpassword} if hwmgtengtype == 'openbmc' else T{ipmi.password} if hwmgtengtype == 'ipmi' else None}}"
            bmcvlantag: "${{hwmgtengtype=V{engines.hardware_mgt_engine.engine_type}: T{openbmc.taggedvlan} if hwmgtengtype == 'openbmc' else T{ipmi.taggedvlan} if hwmgtengtype == 'ipmi' else None}}"
            consport: "T{openbmc.consport}"
            bmcport: "T{ipmi.bmcport}"
            vmhost: "T{vm.host}"
            vmstorage: "T{vm.storage}"
            vmothersetting: "T{vm.othersettings}"
            vmstoragemodel: "T{vm.storagemodel}"
            vmmemory: "T{vm.memory}"
            vmcpus: "T{vm.cpus}"
            vmnics: "T{vm.nics}"
            vmnicnicmodel: "T{vm.nicmodel}"
            vmvirtflags: "T{vm.virtflags}"
            vmvncport: "T{vm.vncport}"
       power_mgt_engine:
          engine_type: "T{nodehm.mgt}" 
          engine_info: 
            pdu: "T{pduoutlet.pdu}"
       netboot_engine:
          engine_type: "T{noderes.netboot}" 
          engine_info: 
            installnic: "T{noderes.installnic}"
            discoverynics: "T{noderes.discoverynics}"
            osimage: "T{nodetype.provmethod}"
            chain: "T{chain.chain}"
            addkcmdline: "T{bootparams.addkcmdline}"
            postscripts: "T{postscripts.postscripts}"
            postbootscripts: "T{postscripts.postbootscripts}"
       console_engine:
          engine_type: "T{nodehm.mgt}"
          engine_info:
            cons: "T{nodehm.cons}"
            conserver: "T{nodehm.conserver}"
            serialport: "T{nodehm.serialport}"
            serialspeed: "T{nodehm.serialspeed}"
            serialflow: "T{nodehm.serialflow}"
            consoleondemand: "T{nodehm.consoleondemand}"
    role: 
    - "${{ snname=T{servicenode.node},objname=V{obj_name}: 'service' if snname ==objname else 'compute'}}"
    - "W:T{servicenode.node}=${{role=V{role}: V{obj_name} if role == 'service' else None}}"
    role_info:
      xcatmaster: "T{noderes.xcatmaster}"
      servicenode: "T{noderes.servicenode}"
      tftpserver: "T{noderes.tftpserver}"
      nfsserver: "T{noderes.nfsserver}"
      monserver: "T{noderes.monserver}"
      nameservers: "T{noderes.nameservers}"
      enablesyslog: "T{noderes.syslog}"
      setupnameserver: "${{role=V{role}: T{servicenode.nameserver} if role == 'service' else None}}"
      setupdhcp:  "${{ role=V{role}: T{servicenode.dhcpserver} if role == 'service' else None}}"
      setuptftp: "${{ role=V{role}: T{servicenode.tftpserver} if role == 'service' else None}}"
      setupnfs: "${{ role=V{role}: T{servicenode.nfsserver} if role == 'service' else None}}"
      setupconserver: "${{ role=V{role}: T{servicenode.conserver} if role == 'service' else None}}"
      setupipforward: "${{ role=V{role}: T{servicenode.ipforward} if role == 'service' else None}}"
      setupproxydhcp: "${{ role=V{role}: T{servicenode.proxydhcp} if role == 'service' else None}}"
      setupldap: "${{ role=V{role}: T{servicenode.ldapserver} if role == 'service' else None}}"
      setupntp: "${{ role=V{role}: T{servicenode.ntpserver} if role == 'service' else None}}"
      dhcpinterfaces: "${{ role=V{role}:T{servicenode.dhcpinterfaces} if role == 'service' else None}}"
        
